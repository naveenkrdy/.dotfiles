" set meta-flag on         # Enable 8bit input
" set input-meta on        # Enable 8bit input
" set output-meta on       # Keep the 8th bit for display
" set convert-meta off     # Turns off 8th bit stripping

" VimPlug
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    let need_to_install_plugins = 1
endif

call plug#begin()

Plug 'jacoborus/tender.vim'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'raimondi/delimitmate'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

call plug#end()

if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif


set nocompatible
set backspace=indent,eol,start
set clipboard=unnamed
set mouse=a
" set autoread
" set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8
" set pumheight=20
" set conceallevel=0
" set splitbelow
" set splitright
set ruler
" set viminfo='25,\"50,n~/.viminfo
" set nobackup
" set nowritebackup
" set noswapfile
set undodir=~/.vim/undodir
set undofile
set history=1000
" set textwidth=120
" set ignorecase
" set smartcase
" set hlsearch
" set incsearch
" set nolazyredraw
" set magic
" set noerrorbells
" set visualbell
" set t_vb=
" set tm=500
" set number
" set wrap
" set wrapmargin=8
" set linebreak
" set showbreak=↪
" set autoindent
" set smartindent
" set ttyfast
" set laststatus=2
" set so=7
" set wildmenu
" set hidden
" set showcmd
" set noshowmode
" set shell=$SHELL
" set cmdheight=2
" " set title
set showmatch
" set mat=2
" set updatetime=300
" set signcolumn=yes
" set shortmess+=c
" set expandtab
" set smarttab
" set tabstop=4
" set softtabstop=4
" set shiftwidth=4
" set shiftround
" set foldmethod=syntax
" set foldlevelstart=99
" set foldnestmax=10
" set nofoldenable
" set foldlevel=1
" set ttimeout
" set ttimeoutlen=1
" "set list
" "set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
" "set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
" set diffopt+=vertical,iwhite,internal,algorithm:patience,hiddenoff
" set t_Co=256
" set t_ut=
" set background=dark

" Set leader key
let g:mapleader = "`"


" If you have vim >=8.0 or Neovim >= 0.1.5
" if (has("termguicolors"))
"  set termguicolors
" endif

" Gruvbox theme
" let g:gruvbox_contrast_dark = 'hard'

" Set cursor shapes in different modes
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

" Hilight cursor line in insert mode
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Ligh-line settings
" let g:lightline = { 'colorscheme': 'gruvbox' }
let g:lightline = { 'colorscheme': 'tender' }

" Vim-indent-guides settings
set ts=2 sw=2 et
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2

" Tag-bar settings
map <leader>t :TagbarToggle<CR>

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
map <leader>s :SyntasticCheck<CR>
map <leader>d :SyntasticReset<CR>
map <leader>e :lnext<CR>
map <leader>r :lprev<CR>

" Restore positon in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Coc-nvim settings
let g:coc_global_extensions = ['coc-python','coc-sh','coc-explorer','coc-vimlsp','coc-json','coc-xml','coc-marketplace']

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

autocmd CursorHold * silent call CocActionAsync('highlight')

" Coc-exploreor
nmap <leader>e :CocCommand explorer
    \ --toggle
    \ --sources=buffer+,file+<CR>
autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif


" move through split windows
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>

" Use alt + hjkl to resize windows
nnoremap <M-j>    :resize -2<CR>
nnoremap <M-k>    :resize +2<CR>
nnoremap <M-h>    :vertical resize -2<CR>
nnoremap <M-l>    :vertical resize +2<CR>

" TAB in general mode will move to text buffer
nnoremap <TAB> :bnext<CR>
" SHIFT-TAB will go back
nnoremap <S-TAB> :bprevious<CR>

syntax on
filetype on
filetype plugin indent on
colorscheme tender
